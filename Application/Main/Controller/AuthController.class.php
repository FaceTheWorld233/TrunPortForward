<?php
namespace Main\Controller;
use Curl\Curl;
use Main\Model\TokenModel;
use Main\Model\SessionsModel;
use Main\Model\UsersModel;
use Think\Auth;
use v1\Model\HostsModel;
use v1\Model\VmsModel;

class AuthController extends BaseController{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    public function login(){
        if (empty(I('get.next'))) redirect('/auth/login?next='.urlencode(C('default-NextURL')));
        if (logon() and (new SessionsModel())->checkSession(getUID()))
        {
            if (empty(I('get.next'))) {
                redirect('/');
            } else {
                redirect(urldecode(I('get.next')).'?token='.(new TokenModel())->createToken(getUID()));
            }
        }
        if (isset($_POST['loginSubmit'])) {
            $email = I('post.email');
            $passwd = $_POST['passwd'];
            $Q = M('users')->where(array("email"=>$email,"passwd"=>$passwd))->select();
            //管理员登录
            if ($Q[0]['uid']<=10 and $Q)
            {
                session('uid',$Q[0]['uid']);
                M('users')->where(array("uid"=>$Q[0]['uid']))->data(array(
                    "ip"=>get_client_ip(),
                    "last_login_time"=>getDateTime(),
                    "last_login_ip" => get_client_ip()
                ))->save();
                LOGGER('Admin '.$Q[0]['uname'].' Logged',"AUTH_Login");
                (new SessionsModel())->createSession(session('uid'));
                if (empty(I('get.next'))) {
                    redirect('/');
                } else {
                    redirect(urldecode(I('get.next')).'?token='.(new TokenModel())->createToken($Q[0]['uid']));
                }
            } else {
                //Step1.非管理员连接whmcs验证凭据
                $Curl = new Curl();
                $curl_result = $Curl->post('',array(
                    "identifier" => "",
                    "secret" => "",
                    "responsetype" => "json",

                    "action" => "ValidateLogin",
                    "email" => $email,
                    "password2" => $passwd,
                ));
                $curl_result = json_decode($curl_result->response,true);
                if ($curl_result['result'] != 'success')
                {
                    $this->error('您提交的登陆凭据与您在客户中心的不一致，请检查');exit;
                }

                //获取姓名等信息
                $client_detail = json_decode(($Curl->post('',array(
                    "identifier" => "",
                    "secret" => "",
                    "responsetype" => "json",

                    "action" => "GetClientsDetails",
                    "stats" => false,
                    "clientid" => $curl_result['userid']
                )))->response,true);
                $Users = new UsersModel();

                //获取WHMCS产品信息
                $client_products = json_decode(($Curl->post('',array(
                    "identifier" => "",
                    "secret" => "",
                    "responsetype" => "json",
                    "action" => "GetClientsProducts",
                    "clientid" => $curl_result['userid'],
                )))->response,true)['products']['product'];


                //Step2.判断是否已在平台中存在
                $Q2 = $Users->where(array("email"=>$email))->select();

                if (!$Q2)
                {
                    LOGGER('User '.$Q[0]['uname'].' Registered',"AUTH_Reg");
                    //Step3.不存在则新建用户并登陆
                    $uid = $Users->data(array(
                        "first_name" => $client_detail['firstname'],
                        "last_name" => $client_detail['lastname'],
                        "passwd" => $passwd,
                        "email"=>$email,
                        "last_login_ip" => get_client_ip(),
                        "reg_time" => getDateTime(),
                    ))->add();
                    session('uid',$uid);
                } else {
                    LOGGER('User '.$Q[0]['uname'].' Logged',"AUTH_Login");
                    //Step3.存在则直接登陆
                    session('uid',$Q2[0]['uid']);
                    M('users')->where(array("uid"=>$Q2[0]['uid']))->data(array(
                        "first_name" => $client_detail['firstname'],
                        "last_name" => $client_detail['lastname'],
                        "passwd" => $passwd,
                        "ip"=>get_client_ip(),
                        "last_login_time"=>getDateTime(),
                        "last_login_ip" => get_client_ip()
                    ))->save();

                }
                $Vms = new VmsModel('vms','portmg_');
                foreach ($client_products as $key => $this_product_info)
                {
                    if (/*$this_product_info['status'] == 'active' and()*/  checkCustomFieldExists($this_product_info,'ims_type'))
                    {
                        $svm_vm_id = getCustomFieldValue($this_product_info,'vserverid');
                        $svm_vm_internal_ip  = getCustomFieldValue($this_product_info,'internalip');
                        $svm_vm_node_id =  getCustomFieldValue($this_product_info,'nodeid');
                        if (!$Vms->where(array("uid"=>session('uid'),"svm_vm_id"=>$svm_vm_id))->select())
                        {
                            $vm_id = $Vms->data(array(
                                "svm_server_id" => 1,
                                "host_id" => (new HostsModel('hosts','portmg_'))->where(array("svm_nodeid"=>$svm_vm_node_id))->select()[0]['id'],
                                "uid" => getUID(),
                                "svm_vm_id" => $svm_vm_id,
                                "svm_internal_ip" => $svm_vm_internal_ip,
                                "create_at" => getDateTime(),
                            ))->add();
                            LOGGER('vmid:'.$vm_id.' Imported',"VM_IMPORT");
                        }
                    }

                }

                (new SessionsModel())->createSession(session('uid'));
                if (empty(I('get.next'))) {
                    redirect('/');
                } else {
                    redirect(urldecode(I('get.next')).'?token='.(new TokenModel())->createToken(session('uid')));
                }
            }
        }
        $this->meta_title=L('Auth_LoginTo').C('site-name');
        $this->display();
    }

    public function logout(){
        session(null);
        cookie(null);
        $this->success('成功退出！正在跳转到首页...','/');
    }

    public function register(){
        $this->meta_title = L('Auth_RegisterTo').C('site-name');
        if (isset($_POST['registerSubmit'])) {
            $email = I('post.email');
            $passwd = I('post.passwd');
            if (!preg_match("/^([0-9A-Za-z\\-_\\.]+)@([0-9a-z]+\\.[a-z]{2,3}(\\.[a-z]{2})?)$/i", $email)or
                trim($passwd) == ''
            ) {$this->error('There is something wrong with the info you just entered.','/auth/register',3);exit;}
            else {
                if (M('users')->where(array("email"=>$email))->select()) {$this->error('该用户已存在！','/auth/register');exit;}
                $uid = M('users')->data(array(
                    "passwd" => $passwd,
                    "email"=>$email,
                    "last_login_ip" => get_client_ip(),
                    "reg_time" => getDateTime(),
                ))->add();
                session('uid',$uid);
                (new SessionsModel())->createSession(session('uid'));
                $this->success('Registration succeed! Now restricting to the panel...','/overview',3);exit;
            }
        }
        $this->display();
    }
}