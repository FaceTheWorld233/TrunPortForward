<?php
/**
 * Created by PhpStorm.
 * User: victor
 * Date: 17/02/2018
 * Time: 12:13 PM
 */
namespace v1\Controller;

use v1\Model\HostsModel;
use v1\Model\IpsModel;
use v1\Model\PortRangesModel;
use v1\Model\PortsModel;
use v1\Model\VmsModel;

class OperatorController extends BaseController
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        if ($this->user_info['type'] != 'ADMIN')
        {
            $this->error('Access Denied','/',3);
        }
    }

    public function managePorts()
    {
        $Ips = new IpsModel();
        $PortRanges = new PortRangesModel();

        $this->assign('ips',$Ips->order('id desc')->select());
        $this->assign('port_ranges',$PortRanges->where('status != "DELETED"')->order('id desc')->select());
        $this->assign('SideBar_Selected','Admin_Ports');
        $this->meta_title = '管理员::端口Range';
        $this->display();
    }

    public function applies()
    {
        $Ports = new PortsModel();
        $type = I('get.type');
        if (empty($type)) { $this->error('Type Invalid!');}
        $this_ports_info = $Ports->where(array("apply_status"=>$type))->order('id desc')->select();
        $this->assign('ports_info',$this_ports_info);
        $this->assign('SideBar_Selected','Admin_Applies');
        $this->meta_title = '管理员::审核';
        $this->display();
    }

    public function siteConfig()
    {
        $this->assign('SideBar_Selected','Admin_SiteConfig');
        $this->meta_title = '管理员::站点配置';
        $this->display();
    }

    /**
     * 创建端口允许范围
     */
    public function Action_port_range_create()
    {
        $ip_id = I('post.ip_id');
        $start_port = I('post.start_port');
        $end_port = I('post.end_port');
        $range_id = (new PortRangesModel())->data(array("ip_id"=>$ip_id,"start_port"=>$start_port,"end_port"=>$end_port,"operator_id"=>getUID()))->add();
        $Ports = new PortsModel();
        for ($i=0;$i<=$end_port-$start_port;$i++)
        {
            $Ports->data(array(
                "port" => $start_port+$i,
                "ip_id" => $ip_id,
                "range_id" => $range_id,
                "create_at" => getDateTime(),
                "status" => "NORMAL",
                "apply_status" => "UNUSED",
            ))->add();
        }
        LOGGER('Created Range id:'.$range_id,"RANGE_CREATE");
        echo json_encode(array(
            "success" => true,
            "msg" => "已经成功添加端口Range",
        ));
    }

    public function Action_port_range_delete()
    {
        $id = I('post.id');
        (new PortRangesModel())->where(array("id"=>$id))->data(array("status"=>"DELETED"))->save();
        (new PortsModel())->where(array("range_id"=>$id))->data(array("status"=>"CANCELLED"))->save();
        echo json_encode(array(
            "success" => true,
            "msg" => "已经成功删除,id=".$id.',关联端口状态已调整为CANCELLED，请手动释放对应端口',
        ));

        //TODO:删除后还需执行删除转发操作
    }

    /**
     * 审核端口
     */
    public function Action_approvePort()
    {
        $port_id = I('post.port_id');
        $type = I('post.type');
        $Ports = new PortsModel();
        $Hosts = new HostsModel();

        //TODO:批量审核时 多个服务器执行命令 当前只以下面这行的id为准
        $port_info = $Ports->where(array("id"=>$port_id))->select()[0];
        $vm_info = (new VmsModel())->where(array("id"=>$port_info['vm_id']))->select()[0];
        $host_info = $Hosts->where(array("id"=>$vm_info['host_id']))->select()[0];
        $ip_info = (new IpsModel())->where(array("id"=>$port_info['ip_id']))->select()[0];
        switch ($type)
        {
            case 'SINGLE':
                $port_info = $Ports->where(array("id"=>$port_id,"apply_status"=>"APPLIED","status"=>"NORMAL"))->select()[0];
                if ($port_info)
                {
                    $EXEC_RES = $Hosts->openPortForwardTCP($host_info['id'],$ip_info['ip_address'],$port_info['port'],$port_info['connect_port'],$vm_info['svm_internal_ip'],$port_id);
                    $Ports->where(array("id"=>$port_id))->data(array("apply_status"=>"USED","used_at"=>getDateTime(),"operator_uid"=>getUID()))->save();
                    LOGGER("Approved port_id".$port_id,"APPROVE_PORT");
                    echo json_encode(array(
                        "success" => true,
                        "msg" => "审核成功"
                    ));
                } else {
                    echo json_encode(array(
                        "error" => true,
                        "msg" => "审核失败，也许在上一秒已经被你的好基友审核过了",
                    ));
                }
                break;
            case 'ALL':
                echo json_encode(array(
                    "error" => true,
                    "msg" => "未实现"
                ));
                break;
        }
    }
}